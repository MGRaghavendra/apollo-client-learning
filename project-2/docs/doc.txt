# Queries:

graphql url:"https://71z1g.sse.codesandbox.io/"

# Executing a Query

The useQuery React hook is the primary API for executing queries in ana Apollo application.To run a query with in a React component,call useQuery and pass it a GraphQL query string.when your component renders,useQuery reuturns an object from Apollo Client that contains loading,error,and data properties you can use to render your Ui

very well Let's create a Graphql query named GET_DOGS.Rember to wrap strings in the gql frunction to parse them into query documents:

index.js
========
import {gql,useQuery} from '@apollo/client'
const GET_DOGS=gql`query GetDogs{ dogs{ id breed } }


create a component named Dogs.insidei it we'll pass our GET_DOGS query to the useQuery hook

index.js
=======
function Dogs()
{
    const[selectedDog,setSelectedDog]=useState()
    const{loading,error,data}=useQuery(GET_DOGS);
    function handleonChange(e)
    {
        setSelectedDog(e.target.value)
    }
    return
    (<div>
    {
      error?<p>Something went wrong</p>:
      loading?<p>Loading..</p>:<div>
      <select name="dog" value={selectedDog} onChange={handleonChange}>
         {
          data.dogs.map((dog)=>(<option key={dog.id} value={dog.breed}>{dog.breed}</option>))
         }
         <section>
      </div>
    }
    </div>
    );
}

As our query executes and the values of loading,error and data changes the dogs component can intelligently render different UI elements according to query's state

\*As long as loading is true,the component presents loading notice

- when loading is false there is no error the query has completed. The component renders a dropdown menu that's populated with the list of dog breeds returned by the server.

When the user selects a dog breed from the populated dropdown, the selection is sent to the handleonChange function

# Caching query results

Whenever Apollo Client fetches query results from your server,it automatically caches those results locally.This makes subsequent executions of the same query extermely fast

To see this caching in action,let's n=build a new component called DogPohot.DogPhoto accepts a prop called breed that reflects the current value of the dropdown menu in our dogs component

## index.js

const GET_DOG_PHOTO = gql` query Dog($breed: String!) { dog(breed: $breed) { id displayImage } }`;

function DogPhoto({ breed }) {
    const { loading, error, data } = useQuery(GET_DOG_PHOTO, {variables: {breed }});
    if (loading) return null;
    if (error) return `Error! ${error}`;
    return (
        <img src={data.dog.displayImage} style={{ height: 100, width: 100 }} />
        );
}

Notice that we are providing configuration option variables to useQuery hook.the variables option is an object that contains all of the variables we want to pass to our GraphQL qury.in this case,we want to pass the currently selected breed from the dropdown

Select bulldog from the dropdown to see its photo appear. Then switch to another breed, and then switch back to bulldog. You'll notice that the bulldog photo loads instantly the second time around. This is the Apollo cache at work!

Updating cached query results
=============================
Sometimes,you want to make sure that our query's cached data is up to date with your server's data.Apollo Client suppports two strategies for this:polling and refetching

Polling:
=======
polling provides near-real-time synchronization with your server by executing your query perodically at a specified interval.To enable polling for a query,passa pollInterval configuration option to the useQuery hook with an interval in milliseconds:

index.js
=======
function DogPhoto({ breed }) {
  const { loading, error, data } = useQuery(GET_DOG_PHOTO, {
    variables: { breed },
    pollInterval: 500,});
  if (loading) return null;
  if (error) return `Error! ${error}`;
  return <img src={data.dog.displayImage} style={{ height: 100, width: 100 }} />;
}

Bysetting PollInterval to 500,we fetch the current breed's image from the server every 0.5 seconds.Note that if you set pollInterval to 0,the query does not poll.

# Refetching

Refetching enables you to refresh query results in response to a particular user action, as opposed to using a fixed interval.

Let's add a button to our DogPhoto component that calls our query's refetch function whenever it's clicked.

You can optionally provide a new variables object to the refetch function. If you don't (as is the case in the following example), the query uses the same variables that it used in its previous execution.
index.js

---

function DogPhoto({ breed }) {
  const { loading, error, data, refetch } = useQuery(GET_DOG_PHOTO, {
    variables: { breed }});
    if (loading) return null;
    if (error) return `Error! ${error}`;
    return (
      <div>
        <img src={data.dog.displayImage} style={{ height: 100, width: 100 }} />
        <button onClick={() => refetch()}>Refetch!</button>
     </div>
     );
}

Click the button and notice that the UI updates with a new dog photo. Refetching is an excellent way to guarantee fresh data, but it introduces some complexity with loading state. In the next section, we'll cover strategies for handling complex loading and error state.

Providing new variables to refetch
You call refetch with a new set of variables like so:

index.js
=======
<button onClick={() => refetch({
breed: 'dalmatian' // Always refetches a dalmatian instead of original breed
})}>Refetch!</button>

Inspecting loading states
=========================
useQuery Hook exposes the loading at the first time loading..
the what happens to our refetching and polling time loading state.

refetch is doesnot re-renders a component untill new data arrives
What if we want to indicate to the user that we're refetching the photo?

The useQuery hook's result object provides fine-grained information about the status of the query via the networkStatus property . to take the advantage of this information,we set the notifyOnNetworkStatusChange option to true so our query component re-renders while a refetch is in flight

import { NetworkStatus } from '@apollo/client';

function DogPhoto({ breed }) {
  const { loading, error, data, refetch, networkStatus } = useQuery(GET_DOG_PHOTO,{
    variables: { breed },
    notifyOnNetworkStatusChange: true,
    });
    if (networkStatus === NetworkStatus.refetch) return 'Refetching!';
    if (loading) return null;
    if (error) return `Error! ${error}`;
    return (
      <div>
          <img src={data.dog.displayImage} style={{ height: 100, width: 100 }} />
          <button onClick={() => refetch()}>Refetch!</button>
      </div>
    );
}

# Manual execution with useLazyQuery

React renders a component that calls useQuery,Apollo Client automatically executes the corresponding query.But what if you want to execute a query in response to a different event,such as auser clicking a button?

The useLazyQuery hook is perfect for executing queries in response to events besides component rendering.Unlike with useQuery,when you call useLazyQuery,it Does not immediatly execute its associated query.instead,it returnd a query function in its result tuple that you call whenever you're ready to execute the query.

index.js
========
import React from 'react';

import { useLazyQuery } from '@apollo/client';

function DelayedQuery() {

const [getDog, { loading, error, data }] = useLazyQuery(GET_DOG_PHOTO);

if (loading) return <p>Loading ...</p>;
if (error) return `Error! ${error}`;

return (

<div>
{data?.dog && <img src={data.dog.displayImage} />}

      <button onClick={() => getDog({ variables: { breed: 'bulldog' } })}>
        Click me!
      </button>
    </div>

);
}
